<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="day 33.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="947"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><table title="Boxes" custom_title="0" dock_id="3" table="4,5:mainBoxes"/><dock_state state="000000ff00000000fd00000001000000020000054b000003e2fc0100000003fb000000160064006f0063006b00420072006f007700730065003101000000000000054b0000000000000000fb000000160064006f0063006b00420072006f007700730065003201000000000000054b0000000000000000fb000000160064006f0063006b00420072006f007700730065003301000000000000054b000000fe00ffffff0000026b0000000000000004000000040000000800000008fc00000000"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="Boxes" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="114"/><column index="2" value="64"/><column index="3" value="70"/><column index="4" value="76"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Warehouses" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="89"/><column index="2" value="155"/><column index="3" value="62"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1">CREATE TABLE Warehouses (
   Code INTEGER NOT NULL,
   Location VARCHAR(255) NOT NULL ,
   Capacity INTEGER NOT NULL,
   PRIMARY KEY (Code)
 );

CREATE TABLE Boxes (
    Code CHAR(4) NOT NULL,
    Contents VARCHAR(255) NOT NULL ,
    Value REAL NOT NULL ,
    Warehouse INTEGER NOT NULL,
    PRIMARY KEY (Code)
 );
 
INSERT INTO Warehouses(Code,Location,Capacity) VALUES(1,'Chicago',3);
INSERT INTO Warehouses(Code,Location,Capacity) VALUES(2,'Chicago',4);
INSERT INTO Warehouses(Code,Location,Capacity) VALUES(3,'New York',7);
INSERT INTO Warehouses(Code,Location,Capacity) VALUES(4,'Los Angeles',2);
INSERT INTO Warehouses(Code,Location,Capacity) VALUES(5,'San Francisco',8);
INSERT INTO Boxes(Code,Contents,Value,Warehouse) VALUES('0MN7','Rocks',180,3);
INSERT INTO Boxes(Code,Contents,Value,Warehouse) VALUES('4H8P','Rocks',250,1);
INSERT INTO Boxes(Code,Contents,Value,Warehouse) VALUES('4RT3','Scissors',190,4);
INSERT INTO Boxes(Code,Contents,Value,Warehouse) VALUES('7G3H','Rocks',200,1);
INSERT INTO Boxes(Code,Contents,Value,Warehouse) VALUES('8JN6','Papers',75,1);
INSERT INTO Boxes(Code,Contents,Value,Warehouse) VALUES('8Y6U','Papers',50,3);
INSERT INTO Boxes(Code,Contents,Value,Warehouse) VALUES('9J6F','Papers',175,2);
INSERT INTO Boxes(Code,Contents,Value,Warehouse) VALUES('LL08','Rocks',140,4);
INSERT INTO Boxes(Code,Contents,Value,Warehouse) VALUES('P0H6','Scissors',125,1);
INSERT INTO Boxes(Code,Contents,Value,Warehouse) VALUES('P2T6','Scissors',150,2);
INSERT INTO Boxes(Code,Contents,Value,Warehouse) VALUES('TU55','Papers',90,5);


----------------------------------------------------------------------------------------------------------------------------------

--3.1 Select all warehouses.
SELECT * 
from Warehouses
;


--3.2 Select all boxes with a value larger than $150.
SELECT *
from Boxes
WHERE Value &gt; 150
;


--3.3 Select all distinct contents in all the boxes.
SELECT DISTINCT Contents
from Boxes
;


--3.4 Select the average value of all the boxes.
SELECT avg(value)
from Boxes
;


--3.5 Select the warehouse code and the average value of the boxes in each warehouse.
SELECT Warehouse, avg(value)
from boxes 
group by Warehouse
;


--3.6 Same as previous exercise, 
--but select only those warehouses where the average value of the boxes is greater than 150.
SELECT Warehouse, avg(value) as a
from boxes 
group by Warehouse
having a &gt; 150
;


--3.7 Select the code of each box, along with the name of the city the box is located in.
SELECT boxes.Code, Warehouses.Location
from Boxes
join Warehouses
on boxes.Warehouse = Warehouses.Code
;


--3.8 Select the warehouse codes, along with the number of boxes in each warehouse. 
SELECT Warehouse, count(Code)
from Boxes
group by Warehouse
;


--3.9 Select the codes of all warehouses that are saturated 
--(a warehouse is saturated if the number of boxes in it is larger than the warehouse's capacity).
SELECT Warehouse
from Boxes
join Warehouses
on boxes.Warehouse = Warehouses.Code
group by Warehouse
HAVING count(boxes.Code) &gt; Warehouses.Capacity
;


--3.10 Select the codes of all the boxes located in Chicago.
SELECT * 
from Boxes
where Warehouse in (SELECT code from Warehouses where Location = 'Chicago')
;


--3.11 Create a new warehouse in New York with a capacity for 3 boxes.
INSERT INTO Warehouses(Code,Location,Capacity) VALUES(6,'New York',3);


--3.12 Create a new box, with code &quot;H5RT&quot;, containing &quot;Papers&quot; with a value of $200, and located in warehouse 2.
INSERT INTO Boxes(Code,Contents,Value,Warehouse) VALUES('H5RT','Papers',200, 2);


--3.13 Reduce the value of all boxes by 15%.
UPDATE Boxes
set Value = value * 0.85
;


--3.14 Remove all boxes with a value lower than $100.
DELETE
from boxes 
where Value &lt; 100
;


-- 3.15 Remove all boxes from saturated warehouses.

SELECT *
from Boxes
join Warehouses
on boxes.Warehouse = Warehouses.Code
group by Warehouse
HAVING count(boxes.Code) &gt; Warehouses.Capacity
;
---need to solve again 


-- 3.16 Add Index for column &quot;Warehouse&quot; in table &quot;boxes&quot;
-- !!!NOTE!!!: index should NOT be used on small tables in practice
CREATE INDEX index_warehouse
on Boxes ( Warehouse)
;


-- 3.17 Print all the existing indexes
-- !!!NOTE!!!: index should NOT be used on small tables in practice



-- 3.18 Remove (drop) the index you added just
-- !!!NOTE!!!: index should NOT be used on small tables in practice
drop INDEX index_warehouse
;




</sql><current_tab id="0"/></tab_sql></sqlb_project>
